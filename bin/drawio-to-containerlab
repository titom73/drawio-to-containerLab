#!/usr/bin/python
# coding: utf-8 -*-
#
#
# Copyright 2020 TiTom73
#
# Licensed under the Apache License, Version 2.0 (the 'License');
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http: //www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an 'AS IS' BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import xmltodict
import argparse
import pprint
from pydantic import BaseModel
from jinja2 import FileSystemLoader, Environment
from draw_to_clab import templater


class Node(BaseModel):
    id = ""
    value = ""
    target = ""
    source = ""
    parent = ""
    x = ""

def readxml(file_name):
    with open(f'{file_name}', 'r', encoding='utf-8') as file:
        my_xml = file.read()
    return my_xml

def find_value(endpoint):
    return [item.value for item in objects_drawio_in_class_node if item.id == endpoint]


def find_link(objects_drawio):
    return [[item.id,item.source, item.target] for item in objects_drawio if item.value == '']


def find_interfaces(links):
    links_tempo = []
    for node_id in links:
        interfaces = [[item.x, item.value] for item in objects_drawio_in_class_node if item.value.lower().find('eth') == 0 and item.parent == node_id[0]]
        links_tempo.append([f"{find_value(node_id[1])[0]}:{interfaces[0][1].lower()}", f"{find_value(node_id[2])[0]}:{interfaces[1][1].lower()}"])
    return links_tempo

def moving_x(objects_drawio):
    objects_drawio_without_special_caract = []
    for item in objects_drawio:
        if 'mxGeometry' in (item) and '@x' in item['mxGeometry']:
            item.update({'@x':item['mxGeometry']['@x']})
        objects_drawio_without_special_caract.append({k.replace('@', ''): item[k] for k in item})
    return objects_drawio_without_special_caract


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description="Draw.io to Containerlab converter")

    parser.add_argument('-i', '--input',
                        help='Draw.io file', type=str)

    parser.add_argument('-o', '--output',
                        help='Containerlab topology output', type=str)

    parser.add_argument('--eos-version',
                        help='cEOS image to use', type=str,
                        default='arista/ceos:4.28.3M')

    parser.add_argument('--lab-name',
                        help='Name of the lab', type=str,
                        default='DRAWIO_LAB')

    parser.add_argument('--mgmt-net',
                        help='Subnet for container management', type=str,
                        default='192.168.2.0/24')

    cli_options = parser.parse_args()

    result = readxml(cli_options.input)
    my_dict = xmltodict.parse(result)
    objects_drawio = my_dict['mxfile']['diagram']['mxGraphModel']['root']['mxCell']

    result = moving_x(objects_drawio)
    objects_drawio_in_class_node = [Node(**extraction) for extraction in result if len(extraction) > 2]
    nodes_yaml = [item.value for item in objects_drawio_in_class_node if item.value.lower().find('eth') != 0 and len(item.value) > 0]
    links = find_link(objects_drawio_in_class_node)
    links_yaml = find_interfaces(links)

    lab_name = cli_options.lab_name
    lab_image = cli_options.eos_version

    output = templater(lab_name=lab_name,lab_image=lab_image,nodes_yaml=nodes_yaml,links_yaml=links_yaml, mgmt_net=cli_options.mgmt_net)

    with open(cli_options.output, 'w') as yaml_file:
        yaml_file.write(output)
